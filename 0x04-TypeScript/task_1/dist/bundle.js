!function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o){console.log({firstName:"John",lastName:"Doe",fullTimeEmployee:!0,location:"New York",contract:!0}),console.log({firstName:"Jane",lastName:"Smith",fullTimeEmployee:!0,location:"London",numberOfReports:17,yearsOfExperience:10});var n=function(e,o){return e.charAt(0)+". "+o};console.log(n("John","Doe")),console.log(n("Jane","Smith"));var t=new(function(){function e(e,o){this.firstName=e,this.lastName=o}return e.prototype.workOnHomework=function(){return"Currently working"},e.prototype.displayName=function(){return this.firstName},e}())("John","Doe");console.log(t.workOnHomework()),console.log(t.displayName())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,